<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.libarymanage.dao.mapper.BorrowRecordsMapper">
  <resultMap id="BaseResultMap" type="com.example.libarymanage.entity.BorrowRecords">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="user_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="book_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="borrow_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="should_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="return_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="state" javaType="java.lang.Boolean" jdbcType="BIT" />
    </constructor>
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from borrow_records
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.libarymanage.entity.BorrowRecords">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into borrow_records (user_id, book_id,
      borrow_time, should_time, return_time, 
      state)
    values (#{userId,jdbcType=INTEGER}, #{bookId,jdbcType=INTEGER},
      #{borrowTime,jdbcType=TIMESTAMP}, #{shouldTime,jdbcType=TIMESTAMP}, #{returnTime,jdbcType=TIMESTAMP}, 
      #{state,jdbcType=BIT})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.example.libarymanage.entity.BorrowRecords">
    update borrow_records
    set user_id = #{userId,jdbcType=INTEGER},
      book_id = #{bookId,jdbcType=INTEGER},
      borrow_time = #{borrowTime,jdbcType=TIMESTAMP},
      should_time = #{shouldTime,jdbcType=TIMESTAMP},
      return_time = #{returnTime,jdbcType=TIMESTAMP},
      state = #{state,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select id, user_id, book_id, borrow_time, should_time, return_time, state
    from borrow_records
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, user_id, book_id, borrow_time, should_time, return_time, state
    from borrow_records
  </select>
  <insert id="borrowBook" parameterType="com.example.libarymanage.entity.BorrowRecords">
    insert into borrow_records (user_id, book_id,
    borrow_time, should_time,
    state)
    values (#{userId,jdbcType=INTEGER}, #{bookId,jdbcType=INTEGER},
    #{borrowTime,jdbcType=TIMESTAMP}, #{shouldTime,jdbcType=TIMESTAMP},
    #{state,jdbcType=BIT})
  </insert>
  <update id="backBook" parameterType="com.example.libarymanage.entity.BorrowRecords">
    update borrow_records
    set
    return_time = NOW(),
    state = #{state,jdbcType=BIT}
    where book_id = #{bookId,jdbcType=INTEGER}
  </update>
  <select id="getBookList" parameterType="java.util.Map" resultType="com.example.libarymanage.entity.dto.BorrowRecordsDTO">
    SELECT
    borrow_time,
    should_time,
    return_time,
    author,
    book_name,
    book_number,
    translator,
    isbn_code,
    comeup_time,
    publish_company,
    entering_men,
    user_number
    FROM
    borrow_records b1
    LEFT JOIN book_info b2 ON b2.id = b1.book_id
    LEFT JOIN `user` ON `user`.id = b1.user_id
    WHERE user_id = #{userId,jdbcType=VARCHAR}
    ORDER BY borrow_time
    LIMIT ${(page-1)*pageSize},
    #{pageSize}
  </select>
  <select id="getBookALLList" parameterType="java.util.Map" resultType="com.example.libarymanage.entity.dto.BorrowRecordsDTO">
    SELECT
      borrow_time,
      should_time,
      return_time,
      author,
      book_name,
      book_number,
      translator,
      isbn_code,
      comeup_time,
      publish_company,
      entering_men,
      user_number
    FROM
    borrow_records b1
    LEFT JOIN book_info b2 ON b2.id = b1.book_id
    LEFT JOIN `user` ON `user`.id = b1.user_id
    WHERE book_name LIKE  concat("%",IFNULL(#{search}, ''), "%") or
          book_number LIKE concat("%",IFNULL(#{search}, ''), "%") or
          user_number like concat("%",IFNULL(#{search}, ''), "%")
    ORDER BY borrow_time
    LIMIT ${(page-1)*pageSize},
    #{pageSize}
  </select>
  <select id="getBookByNumber" parameterType="java.util.Map" resultType="com.example.libarymanage.entity.dto.BorrowRecordsDTO">
    SELECT
      borrow_time,
      should_time,
      book_name,
      user_number
    FROM
    borrow_records b1
    LEFT JOIN book_info b2 ON b2.id = b1.book_id
    LEFT JOIN `user` ON `user`.id = b1.user_id
    WHERE user_number = #{userNumber} and b1.state = #{state}
    ORDER BY borrow_time
    LIMIT ${(page-1)*pageSize},
      #{pageSize}
  </select>
  <select id="getTotalCountBookByNumber" parameterType="java.util.Map" resultType="java.lang.Integer">
    SELECT
    count(*) totalCount
    FROM
    borrow_records b1
    LEFT JOIN book_info b2 ON b2.id = b1.book_id
    LEFT JOIN `user` ON `user`.id = b1.user_id
    WHERE user_number = #{userNumber} and b1.state = #{state}
  </select>
  <select id="getTotalCountByNumber" parameterType="java.lang.String" resultType="java.lang.Integer">
    select count(*) totalCount
    from borrow_records
    WHERE user_id = #{userId,jdbcType=VARCHAR}
  </select>
  <select id="getTotalCount" resultType="java.lang.Integer">
    select count(*) totalCount
    from borrow_records
  </select>
  <select id="getBorrowRecordsByUserNumber" resultMap="BaseResultMap">
    select id, user_id, book_id, borrow_time, should_time, return_time, state
    from borrow_records
  </select>
</mapper>